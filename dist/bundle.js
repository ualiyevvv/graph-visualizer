(()=>{"use strict";let t=new class{constructor(){this.nodes=new Map}addNode(t){this.nodes.has(t)||this.nodes.set(t,new Set)}addEdge(t,s){if(!this.nodes.has(t)||!this.nodes.has(s))throw new Error("Both nodes must be added to the graph before adding an edge.");this.nodes.get(t).add(s),this.nodes.get(s).add(t)}removeNode(t){if(this.nodes.has(t)){for(let s of this.nodes.get(t))this.nodes.get(s).delete(t);this.nodes.delete(t)}}removeEdge(t,s){this.nodes.has(t)&&this.nodes.has(s)&&(this.nodes.get(t).delete(s),this.nodes.get(s).delete(t))}getNeighbors(t){return this.nodes.has(t)?Array.from(this.nodes.get(t)):[]}hasNode(t){return this.nodes.has(t)}hasEdge(t,s){return this.nodes.has(t)&&this.nodes.get(t).has(s)}};["A","Av","Ab","An","Ak","Aj","Ah","Ag","Af","As","As1","As2","As3","As4","As5","As52"].map((s=>t.addNode(s))),[["A","Av"],["A","Ak"],["A","Ah"],["A","Af"],["A","Aj"],["Ak","Ab"],["Ak","An"],["Ak","As2"],["Ak","As"],["Ak","Ag"],["Af","As4"],["Af","As3"],["Af","As1"],["Af","As52"],["Af","As5"]].map((s=>t.addEdge(s[0],s[1])));let s=new class{constructor(t,s){this.graph=t,this.canvas=document.getElementById(s),this.ctx=this.canvas.getContext("2d"),this.nodePositions=new Map,this.animationFrameRequest=null,this.repulsionForce=80,this.attractionForce=.1,this.lastMoveTimestamp=0,this.moveThrottleInterval=20,this.draggingNode=null,this.initializeMouseEvents()}start(){const t=this.canvas.width/2,s=this.canvas.height/2,e=Math.min(t,s)/2,i=this.graph.nodes.size;let o=2*Math.PI/i,n=0;for(let i of this.graph.nodes.keys()){let h=n*o;this.nodePositions.set(i,{x:t+e*Math.cos(h),y:s+e*Math.sin(h)}),n++}const h=()=>{this.updateNodePositions(),this.draw(),requestAnimationFrame(h)};h()}draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.strokeStyle="black";for(let[t,s]of this.graph.nodes)s.forEach((s=>{this.nodePositions.has(t)&&this.nodePositions.has(s)&&(this.ctx.beginPath(),this.ctx.moveTo(this.nodePositions.get(t).x,this.nodePositions.get(t).y),this.ctx.lineTo(this.nodePositions.get(s).x,this.nodePositions.get(s).y),this.ctx.stroke())}));this.ctx.fillStyle="red";for(let[t,s]of this.nodePositions)this.ctx.beginPath(),this.ctx.arc(s.x,s.y,10,0,2*Math.PI),this.ctx.fill()}updateNodePositions(){for(let[t,s]of this.nodePositions){let e=0,i=0;for(let[o,n]of this.nodePositions)if(t!==o){let t=s.x-n.x,o=s.y-n.y,h=Math.sqrt(t*t+o*o);if(h>0){let s=this.repulsionForce/h;e+=s*t/h,i+=s*o/h}}for(let o of this.graph.getNeighbors(t))if(this.nodePositions.has(o)){let t=this.nodePositions.get(o),n=t.x-s.x,h=t.y-s.y;e+=this.attractionForce*n,i+=this.attractionForce*h}s.x+=e,s.y+=i}}initializeMouseEvents(){this.canvas.addEventListener("mousedown",(t=>this.handleMouseDown(t))),this.canvas.addEventListener("mousemove",(t=>this.handleMouseMove(t))),this.canvas.addEventListener("mouseup",(t=>this.handleMouseUp(t)))}handleMouseDown(t){const{offsetX:s,offsetY:e}=t;for(let[t,i]of this.nodePositions){const o=s-i.x,n=e-i.y;if(o*o+n*n<100){this.draggingNode=t;break}}}handleMouseMove(t){if(this.draggingNode){const s=this.nodePositions.get(this.draggingNode);s.x=t.offsetX,s.y=t.offsetY}}handleMouseUp(){this.draggingNode=null}stop(){this.animationFrameRequest&&cancelAnimationFrame(this.animationFrameRequest)}}(t,"graphCanvas");s.start()})();